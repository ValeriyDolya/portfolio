/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nconst btnDarkMode = document.querySelector(\".dark-mode-btn\");\r\n\r\n// 1. Checking for dark theme on system level.\r\nif (window.matchMedia && window.matchMedia(\"(prefers-color-scheme: dark)\").matches ) {\r\n    btnDarkMode.classList.add(\"dark-mode-btn--active\");\r\n\tdocument.body.classList.add(\"dark\");\r\n}\r\n\r\n// 2. Checking for dark theme in the LocalStorage.\r\nif (localStorage.getItem('darkMode') === 'dark') {\r\n    btnDarkMode.classList.add(\"dark-mode-btn--active\");\r\n    document.body.classList.add(\"dark\");\r\n} else if (localStorage.getItem(\"darkMode\") === \"light\") {\r\n    btnDarkMode.classList.remove(\"dark-mode-btn--active\");\r\n    document.body.classList.remove(\"dark\");\r\n}\r\n\r\n// If system settings changed, changing theme too.\r\nwindow\r\n    .matchMedia(\"(prefers-color-scheme: dark)\")\r\n    .addEventListener(\"change\", (event) => {\r\n        const newColorScheme = event.matches ? \"dark\" : \"light\";\r\n\r\n        if (newColorScheme === \"dark\") {\r\n\t\t\tbtnDarkMode.classList.add(\"dark-mode-btn--active\");\r\n\t\t\tdocument.body.classList.add(\"dark\");\r\n\t\t\tlocalStorage.setItem(\"darkMode\", \"dark\");\r\n\t\t} else {\r\n\t\t\tbtnDarkMode.classList.remove(\"dark-mode-btn--active\");\r\n\t\t\tdocument.body.classList.remove(\"dark\");\r\n\t\t\tlocalStorage.setItem(\"darkMode\", \"light\");\r\n\t\t}\r\n    });\r\n\r\n// Activation of dark theme by button.\r\nbtnDarkMode.onclick = function () {\r\n    btnDarkMode.classList.toggle(\"dark-mode-btn--active\");\r\n    const isDark = document.body.classList.toggle(\"dark\");\r\n\r\n    if (isDark) {\r\n        localStorage.setItem(\"darkMode\", \"dark\");\r\n    } else {\r\n        localStorage.setItem(\"darkMode\", \"light\");\r\n    }\r\n};\n\n//# sourceURL=webpack://gulp-assembly/./src/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/app.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;